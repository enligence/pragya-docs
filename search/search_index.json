{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Pragya","text":"<p>\u201cAn on-demand evaluation and assessment solution that evaluates skills in various fields\u201d</p>"},{"location":"#introduction","title":"Introduction","text":"<p>Accelerate your assessment processes with AI. Build customizable evaluation criteria for interviews, exams, training, and more\u2026and get instant &amp; detailed feedback.</p> <p>Single API for: - Conducting interviews - Evaluating candidates - Training employees - Customer Service QA - Employee Surveys and more</p>"},{"location":"#use-cases","title":"Use Cases","text":""},{"location":"#1-academic-assessments","title":"1. Academic Assessments","text":"<ul> <li>Automated Grading: The API can grade essays, assignments, and short answer questions based on a custom rubric set by educators.</li> <li>Feedback Provision: Provide detailed feedback to students on their submissions, highlighting strengths and areas for improvement.</li> </ul>"},{"location":"#2-corporate-training-and-development","title":"2. Corporate Training and Development","text":"<ul> <li>Skill Assessment: Evaluate employee competencies in various skills such as coding, project management, or language proficiency.</li> <li>Training Effectiveness: Assess the effectiveness of training programs by evaluating pre- and post-training knowledge.</li> </ul>"},{"location":"#3-customer-service","title":"3. Customer Service","text":"<ul> <li>Agent Performance: Evaluate customer service agents\u2019 interactions for quality control, focusing on communication skills, problem-solving abilities, and adherence to company protocols.</li> </ul>"},{"location":"#4-language-learning-and-testing","title":"4. Language Learning and Testing","text":"<ul> <li>Language Proficiency Tests: Similar to IELTS, the API can be used to evaluate language proficiency for other languages, providing both scores and feedback.</li> <li>Practice Exams: Provide learners with practice exams and instant feedback to help them prepare for standardized language tests.</li> </ul>"},{"location":"#5-human-resources","title":"5. Human Resources","text":"<ul> <li>Performance Reviews: Support 360-degree feedback processes by providing structured assessments of employee performance.</li> <li>Employee Surveys: Analyze open-ended responses in employee surveys to gauge sentiment and identify common themes.</li> <li>Automated AI Interviews: Conduct mass interviews at a fraction of the cost and hire the best talent for the job.</li> </ul>"},{"location":"#6-creative-industries","title":"6. Creative Industries","text":"<ul> <li>Content Review: Evaluate the quality of creative content such as articles, marketing copy, or scripts against criteria like originality, coherence, and engagement.</li> </ul>"},{"location":"#7-technology-and-engineering","title":"7. Technology and Engineering","text":"<ul> <li>Technical Documentation: Evaluate the clarity, completeness, and usability of technical documentation created by engineers.</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>Customizable: Users can create and modify rubrics easily, ensuring the API can be tailored to specific needs across different industries.</li> <li>Integration: API can be seamlessly integrated with existing platforms such as Learning Management Systems (LMS), Customer Relationship Management (CRM) systems, and Applicant Tracking Systems (ATS).</li> <li>Multi-modal Input: Ability to handle various input types like text, audio, and video for broader applicability.</li> <li>Real-time Feedback: Instant feedback to facilitate immediate learning and improvement.</li> <li>Scalability: Seamlessly handle large volumes of assessments concurrently.</li> </ul>"},{"location":"#how-it-works","title":"How It Works","text":""},{"location":"#integration","title":"Integration","text":"<ul> <li>Easy Setup: Integrate our API with your platform using our comprehensive documentation and support.</li> <li>Flexible Deployment: Deploy the API in the cloud or on-premises to suit your infrastructure needs.</li> </ul>"},{"location":"#customizable-rubrics","title":"Customizable Rubrics","text":"<ul> <li>Define Criteria: Set your own assessment criteria and scoring rubrics tailored to your specific needs.</li> <li>Adjust Parameters: Customize parameters such as weightage for different criteria, acceptable response formats, and feedback styles.</li> </ul>"},{"location":"#input-processing","title":"Input Processing","text":"<ul> <li>Multi-Modal Inputs: Accepts various input types, including text, audio, and video.</li> <li>Natural Language Understanding: Utilizes advanced natural language processing to understand and evaluate responses.</li> </ul>"},{"location":"#assessment-and-scoring","title":"Assessment and Scoring","text":"<ul> <li>Automated Evaluation: The API automatically evaluates responses against the predefined rubric.</li> <li>Real-Time Processing: Provides instant scoring and detailed feedback for quick turnaround times.</li> </ul>"},{"location":"#detailed-feedback","title":"Detailed Feedback","text":"<ul> <li>Comprehensive Reports: Generates detailed assessment reports highlighting strengths and areas for improvement.</li> <li>Actionable Insights: Offers actionable insights and recommendations based on the evaluation results.</li> </ul>"},{"location":"#analytics-and-insights","title":"Analytics and Insights","text":"<ul> <li>Performance Tracking: Track and analyze performance trends over time to identify patterns and areas for improvement.</li> <li>Data Integration: Easily integrate assessment data with your existing analytics tools for deeper insights.</li> </ul>"},{"location":"#security-and-compliance","title":"Security and Compliance","text":"<ul> <li>Data Privacy: Ensures the highest standards of data privacy and security.</li> <li>Compliance: Adheres to relevant industry standards and regulations to protect your data.</li> </ul>"},{"location":"#example-workflow","title":"Example Workflow","text":"<ol> <li>Define Rubrics: Create a custom rubric for the specific assessment scenario.</li> <li>Setup: Integrate the API with your LMS, CRM, or HR system.</li> <li>Collect Inputs: Gather responses from candidates, employees, or students.</li> <li>Process Inputs: The API processes the inputs in real-time, evaluating them against the rubric.</li> <li>Receive Feedback: Obtain instant scores and detailed feedback reports.</li> <li>Analyze Data: Use the insights to make informed decisions and improve future assessments.</li> </ol>"},{"location":"assessment/","title":"Assessments","text":""},{"location":"assessment/#assessment.routes.assess_grammar","title":"<code>assess_grammar</code>  <code>async</code>","text":"<p>Assess the grammar in the text</p> <pre><code>route: /assessment/assess_grammar/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>text</code> <code>TextInput</code> <p>The text to assess</p> required <p>Returns:</p> Name Type Description <code>GrammarAnalysis</code> <code>GrammarAnalysis</code> <p>The assessment of the grammar in the text</p>"},{"location":"assessment/#assessment.routes.assess_pronunciation","title":"<code>assess_pronunciation</code>  <code>async</code>","text":"<p>Assess the pronunciation in the audio input</p> <pre><code>route: /assessment/assess_pronunciation/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>audio_input</code> <code>AudioTextInput</code> <p>The audio input to assess</p> required <p>Returns:</p> Name Type Description <code>PronunciationAnalysis</code> <code>PronunciationAnalysis</code> <p>The assessment of the pronunciation in the audio input</p>"},{"location":"assessment/#assessment.routes.assess_speech","title":"<code>assess_speech</code>  <code>async</code>","text":"<p>Assess the speech in the audio input. Optionally text can be provided to assess the speech against the text.</p> <pre><code>route: /assessment/assess_speech/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>audio_input</code> <code>AudioTextInput</code> <p>The audio input to assess</p> required <p>Returns:</p> Name Type Description <code>SpeechAssessmentOutput</code> <code>SpeechAssessmentOutput</code> <p>The assessment of the speech in the audio input</p>"},{"location":"assessment/#assessment.routes.assess_spoken_essay","title":"<code>assess_spoken_essay</code>  <code>async</code>","text":"<p>Assess the spoken essay</p> <pre><code>route: /assessment/assess_spoken_essay/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>spoken_essay_request</code> <code>SpokenEssayGradingRequest</code> <p>The essay to assess</p> required <p>Returns:</p> Name Type Description <code>SpokenEssayAnalysis</code> <code>SpokenEssayAnalysis</code> <p>The assessment of the essay</p>"},{"location":"assessment/#assessment.routes.assess_written_essay","title":"<code>assess_written_essay</code>  <code>async</code>","text":"<p>Assess the written essay</p> <pre><code>route: /assessment/assess_written_essay/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>essay_request</code> <code>WrittenEssayGradingRequest</code> <p>The essay to assess</p> required <p>Returns:</p> Name Type Description <code>WrittenEssayAnalysis</code> <code>WrittenEssayAnalysis</code> <p>The assessment of the essay</p>"},{"location":"assessment/#assessment.routes.text_similarity","title":"<code>text_similarity</code>  <code>async</code>","text":"<p>Assess the similarity between the query and the references</p> <pre><code>route: /assessment/assess_text_similarity/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>SimilarityCheckInput</code> <p>The input to assess</p> required <p>Returns:</p> Name Type Description <code>SimilarityOutput</code> <code>SimilarityOutput</code> <p>The similarity scores between the query and the references</p>"},{"location":"assessment/#assessment.routes.transcribe","title":"<code>transcribe</code>  <code>async</code>","text":"<p>Transcribe the audio input</p> <pre><code>route: /assessment/transcribe/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>audio_input</code> <code>AudioInput</code> <p>The audio input to transcribe</p> required <p>Returns:</p> Name Type Description <code>TextOutput</code> <code>TextOutput</code> <p>The transcription of the audio input</p>"},{"location":"cass/","title":"Competency & Skills","text":""},{"location":"cass/#cass.routes.generate_competencies","title":"<code>generate_competencies</code>  <code>async</code>","text":"<p>Get competencies for the given content info.</p> <pre><code>route: /cass/get_competencies/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ContentInfo</code> <p>The content for which to generate competencies.</p> required <p>Returns:</p> Name Type Description <code>Competencies</code> <code>list[CompetencyPydantic]</code> <p>list of competencies.</p>"},{"location":"creator/","title":"Creator","text":""},{"location":"creator/#creator.routes.generate_activity","title":"<code>generate_activity</code>  <code>async</code>","text":"<p>generate activity based on the context provided</p> <pre><code>route: /creator/generate_activity/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>activity_request</code> <code>ActivityRequest</code> <p>The request object</p> required <p>Returns:</p> Type Description <code>Question | Quiz | str | MCQQuestion | FillInTheBlankQuestion</code> <p>Generated Content (Question | Quiz | str | MCQQuestion | FillInTheBlankQuestion): The response object</p>"},{"location":"creator/#creator.routes.suggest_activity_list","title":"<code>suggest_activity_list</code>  <code>async</code>","text":"<p>Suggest activity list for a course based on the context provided</p> <pre><code>route: /creator/suggest_activity_list/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>module_info</code> <code>ModuleInfo</code> <p>The module info for which to generate activity list</p> required <p>Returns:</p> Type Description <code>list[ActivityInfo]</code> <p>Suggested Activities (list[ActivityInfo]): Information of activities that can be added to the module.</p>"},{"location":"creator/#creator.routes.suggest_course_info","title":"<code>suggest_course_info</code>  <code>async</code>","text":"<p>Suggest course information based on the context provided</p> <pre><code>route: /creator/suggest_course_info/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>context</code> <code>str</code> <p>Context about what the course should be covering</p> required <p>Returns:</p> Type Description <code>CourseInfo</code> <p>Course Info (CourseInfo): Suggested course information</p>"},{"location":"creator/#creator.routes.suggest_course_outcomes","title":"<code>suggest_course_outcomes</code>  <code>async</code>","text":"<p>Suggest course outcomes based on the context provided</p> <pre><code>route: /creator/suggest_course_outcomes/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>course_outcomes_request</code> <code>CourseOutcomesRequest</code> <p>The request object</p> required <p>Returns:</p> Type Description <code>list[str]</code> <p>List of outcomes (list[str]): In order of importance</p>"},{"location":"creator/#creator.routes.suggest_module_list","title":"<code>suggest_module_list</code>  <code>async</code>","text":"<p>Suggest module list for a course based on the context provided</p> <pre><code>route: /creator/suggest_module_list/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>module_list_request</code> <code>ModuleListRequest</code> <p>The request object</p> required <p>Returns:</p> Type Description <code>list[ModuleInfo]</code> <p>Suggested Modules (ModuleListResponse): The response object</p>"},{"location":"interviews/","title":"Interviews","text":""},{"location":"interviews/#interview.routes.assess_interview_answer","title":"<code>assess_interview_answer</code>  <code>async</code>","text":"<p>Evaluate the answer to a question.</p> <pre><code>route: /interview/evaluate_answer/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>InterviewAnswerEvaluationRequest</code> <p>The candidate's answer and question.</p> required <p>Returns:</p> Name Type Description <code>EvaluatedAnswer</code> <code>EvaluatedAnswer</code> <p>JSON representation of the evaluated answer.</p>"},{"location":"interviews/#interview.routes.generate_interview_questions","title":"<code>generate_interview_questions</code>  <code>async</code>","text":"<p>Generate interview questions based on the job description and resume.</p> <pre><code>route: /interview/generate_interview_questions/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>InterviewQuestionsGenerationRequest</code> <p>The candidate and job overviews.</p> required <p>Returns:</p> Name Type Description <code>result</code> <code>InterviewQuestionGenerationResponse</code> <p>The generated questions with focus areas.</p>"},{"location":"interviews/#interview.routes.jd_resume_match","title":"<code>jd_resume_match</code>  <code>async</code>","text":"<p>Compare the candidate's resume with the job description.</p> <pre><code>route: /interview/jd_resume_match/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>JDResumeMatchData</code> <p>The candidate and job overviews.</p> required <p>Returns:</p> Name Type Description <code>JD</code> <code>JdResumeMatch</code> <p>The JD Candidate match score and reasoning.</p>"},{"location":"interviews/#interview.routes.scan_jd","title":"<code>scan_jd</code>  <code>async</code>","text":"<p>Scan the job description and extract the details.</p> <pre><code>route: /interview/scan_jd/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>JobDescriptionData</code> <p>The text or url to pdf of the jon description.</p> required <p>Returns:</p> Name Type Description <code>JD</code> <code>JobDescription</code> <p>The extracted details from the job description as JSON string.</p>"},{"location":"interviews/#interview.routes.scan_resume","title":"<code>scan_resume</code>  <code>async</code>","text":"<p>Scan the resume and extract the details.</p> <pre><code>route: /interview/scan_resume/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>ResumeData</code> <p>The text or url to pdf of the resume.</p> required <p>Returns:</p> Name Type Description <code>Resume</code> <code>Resume</code> <p>The extracted details from the resume as JSON string.</p>"},{"location":"knowledge/","title":"Knowledge","text":""},{"location":"knowledge/#knowledge.routes.crawl_site","title":"<code>crawl_site</code>  <code>async</code>","text":"<p>Crawl a website</p> <pre><code>route: /knowledge/repository/{repo_id}/crawl_site/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_id</code> <code>str</code> <p>The repository ID</p> required <code>url</code> <code>Url</code> <p>The URL of the website</p> <code>Form(...)</code> <code>metadata</code> <code>Metadata</code> <p>The metadata of the website</p> <code>Form(...)</code> <code>re_crawl</code> <code>bool</code> <p>Whether to re-crawl if site already is in repo</p> <code>Form(...)</code> <p>Returns:</p> Name Type Description <code>KnowledgeOut</code> <code>KnowledgeOut</code> <p>The crawled website details</p>"},{"location":"knowledge/#knowledge.routes.create_knowledge_repository","title":"<code>create_knowledge_repository</code>  <code>async</code>","text":"<p>Create a knowledge repository</p> <pre><code>route: /knowledge/repository/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_details</code> <code>KnowledgeRepositoryIn</code> <p>The details of the repository</p> required <p>Returns:</p> Name Type Description <code>KnowledgeRepositoryOut</code> <code>KnowledgeRepositoryOut</code> <p>The created repository</p>"},{"location":"knowledge/#knowledge.routes.delete_knowledge","title":"<code>delete_knowledge</code>  <code>async</code>","text":"<p>Delete a knowledge file</p> <pre><code>route: /knowledge/repository/{repo_id}/knowledge/{knowledge_id}/\nmethod: DELETE\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_id</code> <code>str</code> <p>The repository ID</p> required <code>knowledge_id</code> <code>str</code> <p>The knowledge ID</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Success response means the file has been deleted</p>"},{"location":"knowledge/#knowledge.routes.delete_knowledge_repository","title":"<code>delete_knowledge_repository</code>  <code>async</code>","text":"<p>Delete a knowledge repository</p> <pre><code>route: /knowledge/repository/{repo_id}/\nmethod: DELETE\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_id</code> <code>str</code> <p>The repository ID</p> required <p>Returns:</p> Name Type Description <code>None</code> <code>None</code> <p>Success response means the repository has been deleted</p>"},{"location":"knowledge/#knowledge.routes.get_file","title":"<code>get_file</code>  <code>async</code>","text":"<p>Get a file in a repository</p> <pre><code>route: /knowledge/repository/{repo_id}/knowledge/{knowledge_id}/\nmethod: GET\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_id</code> <code>str</code> <p>The repository ID</p> required <code>knowledge_id</code> <code>str</code> <p>The knowledge ID</p> required <p>Returns:</p> Name Type Description <code>KnowledgeOut</code> <code>KnowledgeOut</code> <p>The file in the repository</p>"},{"location":"knowledge/#knowledge.routes.get_file_url","title":"<code>get_file_url</code>  <code>async</code>","text":"<p>Get the URL of a file in a repository</p> <pre><code>route: /knowledge/repository/{repo_id}/knowledge/{knowledge_id}/url/\nmethod: GET\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_id</code> <code>str</code> <p>The repository ID</p> required <code>knowledge_id</code> <code>str</code> <p>The knowledge ID</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The URL of the file</p>"},{"location":"knowledge/#knowledge.routes.get_files_in_repo","title":"<code>get_files_in_repo</code>  <code>async</code>","text":"<p>Get a list of files in a repository</p> <pre><code>route: /knowledge/repository/{repo_id}/?page={page}&amp;page_size={page_size}\nmethod: GET\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_id</code> <code>str</code> <p>The repository ID</p> required <code>page</code> <code>int</code> <p>The page number</p> <code>0</code> <code>page_size</code> <code>int</code> <p>The number of items per page</p> <code>-1</code> <p>Returns:</p> Type Description <code>KnowledgeItems</code> <p>Knowledge Items (KnowledgeItems): A list of files in the repository along with the total and remaining counts</p>"},{"location":"knowledge/#knowledge.routes.upload_file","title":"<code>upload_file</code>  <code>async</code>","text":"<p>Upload a file</p> <pre><code>route: /knowledge/repository/{repo_id}/upload/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_id</code> <code>str</code> <p>The repository ID</p> required <code>file</code> <code>UploadFile</code> <p>The file to upload</p> <code>File(...)</code> <code>metadata</code> <code>Metadata</code> <p>The metadata of the file as a string</p> <code>Form(None)</code> <p>Returns:</p> Name Type Description <code>KnowledgeOut</code> <code>KnowledgeOut</code> <p>The uploaded file</p>"},{"location":"knowledge/#knowledge.routes.upload_url","title":"<code>upload_url</code>  <code>async</code>","text":"<p>Upload a file from a URL</p> <pre><code>route: /knowledge/repository/{repo_id}/upload_url/\nmethod: POST\nauth: API Key as bearer token in the header\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>repo_id</code> <code>str</code> <p>The repository ID</p> required <code>url</code> <code>Url</code> <p>The URL of the file</p> <code>Form(...)</code> <code>metadata</code> <code>Metadata</code> <p>The metadata of the file</p> <code>Form(...)</code> <p>Returns:</p> Name Type Description <code>KnowledgeOut</code> <code>KnowledgeOut</code> <p>The uploaded file</p>"},{"location":"models/","title":"Models","text":""},{"location":"models/#grpc_client.models.AudioInput","title":"<code>AudioInput</code>","text":"<p>Audio input. Only one of the binary data, or url or base64 representation must be present, not more than one.</p> <p>Attributes:</p> Name Type Description <code>audio_data</code> <code>bytes</code> <p>Audio data</p> <code>sampling_rate</code> <code>int</code> <p>Sampling rate, Default is 16000</p> <code>audio_url</code> <code>str</code> <p>Audio URL</p> <code>base64_audio</code> <code>str</code> <p>Base64 audio</p>"},{"location":"models/#grpc_client.models.AudioTextInput","title":"<code>AudioTextInput</code>","text":"<p>Audio text input. Only one of the audio data, or text or audio url or base64 representation must be present, not more than one.</p> <p>Attributes:</p> Name Type Description <code>audio_data</code> <code>bytes</code> <p>Audio data</p> <code>text</code> <code>str</code> <p>Text expected to be spoken in the given audio [Optional]</p> <code>locale</code> <code>str</code> <p>Expected locale for which evaluation should happen, one of ['us', 'gb', 'in']</p> <code>sampling_rate</code> <code>int</code> <p>Sampling rate, Default is 16000</p> <code>audio_url</code> <code>str</code> <p>Audio URL</p> <code>base64_audio</code> <code>str</code> <p>Base64 audio</p>"},{"location":"models/#grpc_client.models.FluencyAnalysis","title":"<code>FluencyAnalysis</code>","text":"<p>Fluency analysis</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>int</code> <p>Score for fluency</p> <code>feedback</code> <code>str</code> <p>Feedback for fluency</p> <code>pauses</code> <code>list[Pause]</code> <p>List of pauses</p> <code>pause_occurence_score</code> <code>int</code> <p>Percent score for how well the pauses are placed</p> <code>filler_avoidance_score</code> <code>int</code> <p>Percent score indicating how well the filler words are avoided</p> <code>speech_rate_score</code> <code>int</code> <p>Percent score indicating how good the speech rate is</p> <code>mean_utterence_len_score</code> <code>int</code> <p>Percent score for mean utterance length</p> <code>speech_duration</code> <code>float</code> <p>Duration of speech in seconds</p>"},{"location":"models/#grpc_client.models.Gender","title":"<code>Gender</code>","text":"<p>Gender Enum</p> <p>Values:</p> <pre><code>male   : male\nfemale : female\nunknown : unknown\n</code></pre>"},{"location":"models/#grpc_client.models.GrammarAnalysis","title":"<code>GrammarAnalysis</code>","text":"<p>Grammar analysis</p> <p>Attributes:</p> Name Type Description <code>rules</code> <code>list[GrammarRule]</code> <p>List of grammar rules</p> <code>score</code> <code>int</code> <p>Percent score of the grammar analysis</p> <code>word_count</code> <code>int</code> <p>Number of words in the text</p> <code>sentence_count</code> <code>int</code> <p>Number of sentences in the text</p> <code>spelling_errors_count</code> <code>int</code> <p>Number of spelling errors</p> <code>grammar_errors_count</code> <code>int</code> <p>Number of grammar errors</p> <code>sentence_quality</code> <code>int</code> <p>Percent score of sentence quality</p> <code>word_quality</code> <code>int</code> <p>Percent score of word quality</p> <code>error</code> <code>str</code> <p>Error message in case of failure to analyze</p>"},{"location":"models/#grpc_client.models.GrammarRule","title":"<code>GrammarRule</code>","text":"<p>Grammar rule details</p> <p>Attributes:</p> Name Type Description <code>ruleId</code> <code>str</code> <p>Grammar rule ID</p> <code>message</code> <code>str</code> <p>Message describing the issue</p> <code>matchedText</code> <code>str</code> <p>text that matched the rule</p> <code>replacements</code> <code>list[str]</code> <p>Suggestive list of replacements</p> <code>offsetInContext</code> <code>int</code> <p>Offset in context where the error occurred</p> <code>context</code> <code>str</code> <p>Context of the error (surrounding text)</p> <code>offset</code> <code>int</code> <p>Offset where the error occurred in overall text</p> <code>errorLength</code> <code>int</code> <p>Length of the error text</p> <code>category</code> <code>str</code> <p>Category of error</p> <code>ruleIssueType</code> <code>str</code> <p>Rule issue type</p> <code>sentence</code> <code>str</code> <p>The sentence in which the error occurred</p>"},{"location":"models/#grpc_client.models.IntonationAnalysis","title":"<code>IntonationAnalysis</code>","text":"<p>Intonation analysis</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>int</code> <p>Percent score of how well the intonation is</p> <code>gender</code> <code>Gender</code> <p>Gender of the speaker</p> <code>mood</code> <code>str</code> <p>Mood of the speaker (reading, passionately speaking, or no emotion)</p>"},{"location":"models/#grpc_client.models.Pause","title":"<code>Pause</code>","text":"<p>Pause details</p> <p>Attributes:</p> Name Type Description <code>start</code> <code>float</code> <p>Start time, in spoken audio, of the pause in seconds</p> <code>end</code> <code>float</code> <p>End time, in spoken audio, of the pause in seconds</p> <code>after_word_index</code> <code>int</code> <p>Index of the word after which the pause occurs</p> <code>pause_type</code> <code>PauseType</code> <p>Type of pause</p> <code>status</code> <code>PauseStatus</code> <p>Status of the pause</p>"},{"location":"models/#grpc_client.models.PauseStatus","title":"<code>PauseStatus</code>","text":"<p>Status of pause Enum</p> <p>Values:</p> <pre><code>missed    : Missed pause\nextra     : Extra pause\ncorrect   : Correct pause\nincorrect : Incorrect pause\n</code></pre>"},{"location":"models/#grpc_client.models.PauseType","title":"<code>PauseType</code>","text":"<p>Type of pause Enum</p> <p>Values:</p> <pre><code>short : Short pause\nlong  : Long pause\n</code></pre>"},{"location":"models/#grpc_client.models.PronunciationAnalysis","title":"<code>PronunciationAnalysis</code>","text":"<p>Pronunciation analysis</p> <p>Attributes:</p> Name Type Description <code>words</code> <code>list[Word]</code> <p>List of words in spoken text</p> <code>stats</code> <code>Stats</code> <p>Scores and feedback for the spoken text</p> <code>locale</code> <code>str</code> <p>Most likely locale of the spoken text, one of [en-IN, en-US, en-GB]</p> <code>audio_duration_seconds</code> <code>int</code> <p>Audio duration in seconds of the speech</p> <code>feedback</code> <code>str</code> <p>overall feedback for the speech</p> <code>error</code> <code>str</code> <p>Any error message if the analysis failed</p>"},{"location":"models/#grpc_client.models.SimilarityCheckInput","title":"<code>SimilarityCheckInput</code>","text":"<p>Similarity check input</p> <p>Attributes:</p> Name Type Description <code>query</code> <code>str</code> <p>Query text to check similarity</p> <code>references</code> <code>list[str]</code> <p>List of reference texts to check similarity against</p>"},{"location":"models/#grpc_client.models.SimilarityOutput","title":"<code>SimilarityOutput</code>","text":"<p>Similarity output</p> <p>Attributes:</p> Name Type Description <code>scores</code> <code>list[int]</code> <p>Percent scores of match for each reference</p>"},{"location":"models/#grpc_client.models.SpeechAssessmentOutput","title":"<code>SpeechAssessmentOutput</code>","text":"<p>Speech assessment details</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>int</code> <p>Overall percent score of the assessment</p> <code>feedback</code> <code>str</code> <p>Overall feedback for the assessment</p> <code>spoken_text</code> <code>str</code> <p>Text that was found most likely spoken in the speech</p> <code>pronunciation</code> <code>PronunciationAnalysis</code> <p>Detailed analysis of pronunciation</p> <code>fluency</code> <code>FluencyAnalysis</code> <p>Detailed analysis of fluency</p> <code>intonation</code> <code>IntonationAnalysis</code> <p>Detailed analysis of intonation</p> <code>speed</code> <code>SpeedAnalysis</code> <p>Detailed analysis of speaking speed</p> <code>grammar</code> <code>GrammarAnalysis</code> <p>Detailed analysis of grammar</p> <code>percent_text_spoken</code> <code>int</code> <p>Percentage of text actually spoken of what was supposed to be spoken (only if expected text was provided)</p> <code>audio_duration_seconds</code> <code>int</code> <p>Audio duration in seconds</p> <code>standard_band_scores</code> <code>StandardBandScores</code> <p>Standard band scores for IELTS, TOEFL and CEFR</p> <code>error</code> <code>str</code> <p>Error message in case of failure to analyze</p> <code>spoken_elements_analysis</code> <code>SpokenElementsAnalysis</code> <p>Spoken elements analysis if requested</p>"},{"location":"models/#grpc_client.models.SpeedAnalysis","title":"<code>SpeedAnalysis</code>","text":"<p>Speed analysis</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>int</code> <p>Percent score for how pleasant is the speed at which the content is spoken</p> <code>feedback</code> <code>str</code> <p>Suggestive feedback</p> <code>wpm</code> <code>int</code> <p>Words per minute</p>"},{"location":"models/#grpc_client.models.StandardBandScores","title":"<code>StandardBandScores</code>","text":"<p>Standard band scores</p> <p>Attributes:</p> Name Type Description <code>ielts_score</code> <code>float</code> <p>IELTS score</p> <code>toefl_score</code> <code>float</code> <p>TOEFL score</p> <code>cefr_level</code> <code>str</code> <p>CEFR level</p>"},{"location":"models/#grpc_client.models.Stats","title":"<code>Stats</code>","text":"<p>Stats for a word</p> <p>Attributes:</p> Name Type Description <code>correctness</code> <code>int</code> <p>A percentage score between 0-100 indicating how close the observed phoneme sequence is to the expected phoneme sequence</p> <code>avg_prob</code> <code>float</code> <p>Average probability of the phoneme sequence for the word</p> <code>avg_observed_prob</code> <code>float</code> <p>Average probability of the observed phoneme sequence in the speech during the time the word was spoken</p> <code>score</code> <code>int</code> <p>Score of the word: A percent overall score indicating how well the given word was spoken</p> <code>phoneme_score</code> <code>int</code> <p>A percent score of how correctly the expected phonemes were spoken discounting the stress factor</p> <code>stress_score</code> <code>int</code> <p>A percent score of how accurate the stress was in the spoken word</p> <code>feedback</code> <code>str</code> <p>Suggested feedback to improve pronunciation or inform the user about the pronunciation of the word</p>"},{"location":"models/#grpc_client.models.TextInput","title":"<code>TextInput</code>","text":"<p>Text input</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>Text</p>"},{"location":"models/#grpc_client.models.TextOutput","title":"<code>TextOutput</code>","text":"<p>Text output and associated metadata</p> <p>Attributes:</p> Name Type Description <code>text</code> <code>str</code> <p>Text output</p> <code>audio_duration_seconds</code> <code>int</code> <p>Audio duration in seconds</p> <code>error</code> <code>str</code> <p>Error message</p>"},{"location":"models/#grpc_client.models.Word","title":"<code>Word</code>","text":"<p>Word details</p> <p>Attributes:</p> Name Type Description <code>word</code> <code>str</code> <p>the word that was spoken</p> <code>start_time</code> <code>float</code> <p>Start time, in the speech, of the word in seconds</p> <code>end_time</code> <code>float</code> <p>End time, in the speech, of the word in seconds</p> <code>aligned_phonemes</code> <code>list[str]</code> <p>Phonemes that were expected to be spoken for the word</p> <code>observed_phonemes</code> <code>list[str]</code> <p>Phonemes that were most likely spoken for the word</p> <code>aligned_probs</code> <code>list[float]</code> <p>Probabilities of the aligned phonemes</p> <code>observed_probs</code> <code>list[float]</code> <p>Probabilities of the observed phonemes</p> <code>aligned_probs_nostress</code> <code>list[float]</code> <p>Probabilities of expected phonemes neglecting the stress factor</p> <code>observed_probs_nostress</code> <code>list[float]</code> <p>Probabilities of observed phonemes neglecting the stress factor</p> <code>stats</code> <code>Stats</code> <p>Scores and feedback for the word</p>"},{"location":"models/#assessment.ielts.models.RubricEvaluation","title":"<code>RubricEvaluation</code>","text":"<p>Evaluation of some Rubric for grading.</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>int</code> <p>A value between 0-9. (IELTS band)</p> <code>feedback</code> <code>str</code> <p>critique with examples and suggestive improvements.</p>"},{"location":"models/#assessment.ielts.models.SpeechAssessment","title":"<code>SpeechAssessment</code>","text":"<p>Speech assessment of the spoken essay.</p> <p>Attributes:</p> Name Type Description <code>speech_analysis</code> <code>SpeechAssessmentOutput</code> <p>Speech assessment output</p> <code>spoken_rubrics</code> <code>SpokenRubrics</code> <p>Spoken rubrics</p>"},{"location":"models/#assessment.ielts.models.SpokenEssayAnalysis","title":"<code>SpokenEssayAnalysis</code>","text":"<p>Analysis of an spoken essay based on the rubric scores.</p> <p>Attributes:</p> Name Type Description <code>fluency_and_coherence</code> <code>RubricEvaluation</code> <p>Evaluate how fluent and coherent are the presented ideas.</p> <code>lexical_resource</code> <code>RubricEvaluation</code> <p>Evaluate the vocabulary use, including precision, variety, and word formation.</p> <code>grammatical_range_and_accuracy</code> <code>RubricEvaluation</code> <p>Evaluate grammar, sentence structure, and punctuation range and accuracy.</p> <code>pronunciation</code> <code>RubricEvaluation</code> <p>Evaluate the pronunciation, intonation, and stress of the spoken words.</p> <code>task_response</code> <code>RubricEvaluation</code> <p>Evaluate how well the response meets task requirements.</p> <code>transcription</code> <code>str</code> <p>The transcription of the spoken essay.</p> <code>ielts_score</code> <code>float</code> <p>IELTS score</p> <code>toefl_score</code> <code>float</code> <p>TOEFL score</p> <code>cefr_level</code> <code>str</code> <p>CEFR level</p>"},{"location":"models/#assessment.ielts.models.SpokenEssayGradingRequest","title":"<code>SpokenEssayGradingRequest</code>","text":"<p>Request for grading an essay.</p> <p>Attributes:</p> Name Type Description <code>question</code> <code>str</code> <p>The prompt or question for the essay.</p> <code>speech</code> <code>AudioInput</code> <p>The speech to be graded.</p>"},{"location":"models/#assessment.ielts.models.SpokenRubrics","title":"<code>SpokenRubrics</code>","text":"<p>Rubrics of the spoken elements of an essay.</p> <p>Attributes:</p> Name Type Description <code>fluency</code> <code>RubricEvaluation</code> <p>Evaluate how fluent and coherent are the presented ideas.</p> <code>pronunciation</code> <code>RubricEvaluation</code> <p>Evaluate the pronunciation, intonation, and stress of the spoken words.</p>"},{"location":"models/#assessment.ielts.models.WrittenEssayAnalysis","title":"<code>WrittenEssayAnalysis</code>","text":"<p>Analysis of an essay based on the rubric scores.</p> <p>Attributes:</p> Name Type Description <code>task_response</code> <code>RubricEvaluation</code> <p>Evaluate how well the response meets task requirements.</p> <code>coherence_and_cohesion</code> <code>RubricEvaluation</code> <p>Evaluate how clear and logically arranged are the presented ideas.</p> <code>lexical_resource</code> <code>RubricEvaluation</code> <p>Evaluate the vocabulary use, including precision, variety, and word formation.</p> <code>grammatical_range_and_accuracy</code> <code>RubricEvaluation</code> <p>Evaluate grammar, sentence structure, and punctuation range and accuracy.</p> <code>ielts_score</code> <code>float</code> <p>IELTS score</p> <code>toefl_score</code> <code>float</code> <p>TOEFL score</p> <code>cefr_level</code> <code>str</code> <p>CEFR level</p>"},{"location":"models/#assessment.ielts.models.WrittenEssayGradingRequest","title":"<code>WrittenEssayGradingRequest</code>","text":"<p>Request for grading an essay.</p> <p>Attributes:</p> Name Type Description <code>question</code> <code>str</code> <p>The prompt or question for the essay.</p> <code>essay</code> <code>str</code> <p>The essay to be graded.</p> <code>min_word_limit</code> <code>int</code> <p>The minimum word limit for the essay. Default is 150.</p> <code>max_word_limit</code> <code>int</code> <p>The maximum word limit for the essay. Default is 500.</p>"},{"location":"models/#interview.resume_models.Award","title":"<code>Award</code>","text":"<p>Award won or achievements by the candidate</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the award or achievement</p> <code>description</code> <code>str</code> <p>Description of the award or achievement</p> <code>date</code> <code>str</code> <p>Date of the award or achievement</p>"},{"location":"models/#interview.resume_models.Certification","title":"<code>Certification</code>","text":"<p>Certification received by the candidate</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the certification</p> <code>description</code> <code>str</code> <p>Description of the certification</p> <code>date</code> <code>str</code> <p>Date of the certification</p> <code>issuer</code> <code>str</code> <p>Issuer of the certification</p> <code>validity</code> <code>str</code> <p>Validity of the certification</p>"},{"location":"models/#interview.resume_models.Education","title":"<code>Education</code>","text":"<p>Education details of the candidate</p> <p>Attributes:</p> Name Type Description <code>degree</code> <code>str</code> <p>Degree obtained</p> <code>major</code> <code>str</code> <p>Major</p> <code>university</code> <code>str</code> <p>University</p> <code>start</code> <code>str</code> <p>Start date</p> <code>end</code> <code>str</code> <p>End date</p> <code>description</code> <code>str</code> <p>Brief description of the degree</p>"},{"location":"models/#interview.resume_models.Experience","title":"<code>Experience</code>","text":"<p>Experience of the candidate.</p> <p>Attributes:</p> Name Type Description <code>years</code> <code>int</code> <p>Number of years of experience</p> <code>domain</code> <code>str</code> <p>Domain of the experience</p>"},{"location":"models/#interview.resume_models.Level","title":"<code>Level</code>","text":"<p>Experience level of skill.</p> <p>Attributes:</p> Name Type Description <code>junior</code> <p>Junior level</p> <code>mid_level</code> <p>Mid level</p> <code>senior</code> <p>Senior level</p>"},{"location":"models/#interview.resume_models.PersonalInfo","title":"<code>PersonalInfo</code>","text":"<p>Personal information of the candidate</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Full Name of the candidate</p> <code>email</code> <code>str</code> <p>Email of the candidate</p> <code>phone_number</code> <code>str</code> <p>well formatted phone number of the candidate</p> <code>address</code> <code>str</code> <p>mailing address</p> <code>linkedin</code> <code>str</code> <p>full LinkedIn URL of the candidate</p> <code>github</code> <code>str</code> <p>full GitHub URL of the candidate</p>"},{"location":"models/#interview.resume_models.Project","title":"<code>Project</code>","text":"<p>Project of the candidate</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the project</p> <code>description</code> <code>str</code> <p>Description of the project</p> <code>technologies</code> <code>str</code> <p>Technologies used in the project</p> <code>impact</code> <code>str</code> <p>Impact of the project</p> <code>achievements</code> <code>str</code> <p>Achievements in the project</p> <code>role</code> <code>str</code> <p>Role in the project</p>"},{"location":"models/#interview.resume_models.Qualification","title":"<code>Qualification</code>","text":"<p>Qualification of the candidate.</p> <p>Attributes:</p> Name Type Description <code>education</code> <code>list[Education]</code> <p>Education details.</p> <code>experience</code> <code>list[Experience]</code> <p>Experience details.</p>"},{"location":"models/#interview.resume_models.Resume","title":"<code>Resume</code>","text":"<p>Resume of the candidate</p> <p>Attributes:</p> Name Type Description <code>personal_info</code> <code>PersonalInfo</code> <p>Personal information of the candidate</p> <code>work_experience</code> <code>list[WorkExperience]</code> <p>Work experience of the candidate</p> <code>skill_domains</code> <code>list[SkillDomain]</code> <p>Skill domains of the candidate</p> <code>projects</code> <code>list[Project]</code> <p>Projects of the candidate</p> <code>publication_summary</code> <code>str</code> <p>Publication summary of the candidate</p> <code>certifications</code> <code>list[Certification]</code> <p>Certifications of the candidate</p> <code>awards</code> <code>list[Award]</code> <p>Awards of the candidate</p> <code>languages</code> <code>list[str]</code> <p>Languages known by the candidate</p> <code>qualification</code> <code>Qualification</code> <p>Qualification of the candidate</p> <code>overall_summary</code> <code>str</code> <p>Overall summary of the candidate</p>"},{"location":"models/#interview.resume_models.ResumeData","title":"<code>ResumeData</code>","text":"<p>Data required to scan the resume.</p> <p>Attributes:</p> Name Type Description <code>resume_text</code> <code>str</code> <p>The text extracted from the resume.</p> <code>url</code> <code>str</code> <p>The URL to the PDF resume.</p>"},{"location":"models/#interview.resume_models.Skill","title":"<code>Skill</code>","text":"<p>Skill of the candidate</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the skill</p> <code>level</code> <code>Level</code> <p>Experience level of the skill</p>"},{"location":"models/#interview.resume_models.SkillDomain","title":"<code>SkillDomain</code>","text":"<p>Major Domain of the skill</p> <p>Attributes:</p> Name Type Description <code>domain</code> <code>str</code> <p>Domain of the skill</p> <code>skills</code> <code>list[Skill]</code> <p>List of skills in this domain</p>"},{"location":"models/#interview.resume_models.WorkExperience","title":"<code>WorkExperience</code>","text":"<p>Work experience of the candidate specifically described in the resume. Do not infer.</p> <p>Attributes:</p> Name Type Description <code>company</code> <code>str</code> <p>Company name</p> <code>job_role</code> <code>str</code> <p>Job role</p> <code>description</code> <code>str</code> <p>Brief description of work done at this role.</p> <code>start</code> <code>str</code> <p>Start date</p> <code>end</code> <code>str</code> <p>End date</p>"},{"location":"models/#interview.jd_models.CollegeType","title":"<code>CollegeType</code>","text":"<p>Type of college.</p> <p>Attributes:</p> Name Type Description <code>TIER1</code> <p>Tier 1 college</p> <code>IIT</code> <p>Indian Institute of Technology</p> <code>IIM</code> <p>Indian Institute of Management</p> <code>ISB</code> <p>Indian School of Business</p> <code>XLRI</code> <p>Xavier Labour Relations Institute</p> <code>ANY</code> <p>Any college</p>"},{"location":"models/#interview.jd_models.CompanyInfo","title":"<code>CompanyInfo</code>","text":"<p>Information about the company as mentioned in the job description.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>Name of the company</p> <code>email</code> <code>str</code> <p>Email of the company</p> <code>phone</code> <code>str</code> <p>Phone number of the company</p> <code>address</code> <code>str</code> <p>Address of the company</p> <code>website</code> <code>str</code> <p>Website of the company</p> <code>about</code> <code>str</code> <p>About the company</p>"},{"location":"models/#interview.jd_models.EducationDegree","title":"<code>EducationDegree</code>","text":"<p>Type of degree.</p> <p>Attributes:</p> Name Type Description <code>bachelor</code> <p>Bachelor's degree</p> <code>master</code> <p>Master's degree</p> <code>doctorate</code> <p>Doctorate degree</p> <code>post_doctorate</code> <p>Post-doctorate degree</p>"},{"location":"models/#interview.jd_models.EducationRequirement","title":"<code>EducationRequirement</code>","text":"<p>Education requirement for the job role.</p> <p>Attributes:</p> Name Type Description <code>college</code> <code>CollegeType</code> <p>Type of college</p> <code>degree</code> <code>EducationDegree</code> <p>Type of degree</p> <code>major</code> <code>str</code> <p>Major in the degree</p> <code>requirement_type</code> <code>RequirementType</code> <p>Type of requirement</p>"},{"location":"models/#interview.jd_models.Experience","title":"<code>Experience</code>","text":"<p>Experience requirement for the job role.</p> <p>Attributes:</p> Name Type Description <code>years</code> <code>int</code> <p>Number of years of experience</p> <code>domain</code> <code>str</code> <p>Domain of the experience</p> <code>requirement_type</code> <code>RequirementType</code> <p>Type of requirement</p>"},{"location":"models/#interview.jd_models.JobDescription","title":"<code>JobDescription</code>","text":"<p>Job Description</p> <p>Attributes:</p> Name Type Description <code>job_role</code> <code>str</code> <p>Job role</p> <code>company_info</code> <code>CompanyInfo</code> <p>Information about the company</p> <code>description</code> <code>str</code> <p>Description of the job role</p> <code>qualification</code> <code>Qualification</code> <p>Qualification requirements</p> <code>job_location</code> <code>JobLocationType</code> <p>Job location</p> <code>responsibilities</code> <code>list[Responsibility]</code> <p>Responsibilities</p> <code>required_skills</code> <code>list[str]</code> <p>Required skills</p> <code>nice_to_have_skills</code> <code>list[str]</code> <p>Nice to have skills</p> <code>overall_summary</code> <code>str</code> <p>Overall summary of the job description</p>"},{"location":"models/#interview.jd_models.JobDescriptionData","title":"<code>JobDescriptionData</code>","text":"<p>Data required to scan the job description.</p> <p>Attributes:</p> Name Type Description <code>jd_text</code> <code>str</code> <p>The text extracted from the job description.</p> <code>url</code> <code>str</code> <p>The URL to the job description.</p>"},{"location":"models/#interview.jd_models.JobLocationType","title":"<code>JobLocationType</code>","text":"<p>Type of job location.</p> <p>Attributes:</p> Name Type Description <code>remote</code> <p>Remote location</p> <code>on_site</code> <p>On-site location</p> <code>hybrid</code> <p>Hybrid location</p>"},{"location":"models/#interview.jd_models.Level","title":"<code>Level</code>","text":"<p>Experience level of skill.</p> <p>Attributes:</p> Name Type Description <code>junior</code> <p>Junior level</p> <code>mid_level</code> <p>Mid level</p> <code>senior</code> <p>Senior level</p>"},{"location":"models/#interview.jd_models.Qualification","title":"<code>Qualification</code>","text":"<p>Qualification requirements for the job</p> <p>Attributes:</p> Name Type Description <code>education</code> <code>list[EducationRequirement]</code> <p>Education requirements</p> <code>experience</code> <code>list[Experience]</code> <p>Experience requirements</p>"},{"location":"models/#interview.jd_models.RequirementType","title":"<code>RequirementType</code>","text":"<p>Type of requirement.</p> <p>Attributes:</p> Name Type Description <code>must_have</code> <p>Must have requirement</p> <code>nice_to_have</code> <p>Nice to have requirement</p>"},{"location":"models/#interview.jd_models.Responsibility","title":"<code>Responsibility</code>","text":"<p>Responsibility of the job role.</p> <p>Attributes:</p> Name Type Description <code>responsibility</code> <code>str</code> <p>Responsibility</p> <code>required_skills</code> <code>list[str]</code> <p>Required skills for the responsibility</p> <code>nice_to_have_skills</code> <code>list[str]</code> <p>Nice to have skills for the responsibility</p>"},{"location":"models/#interview.jd_resume_models.JDResumeMatchData","title":"<code>JDResumeMatchData</code>","text":"<p>Data required to match the job description with the resume.</p> <p>Attributes:</p> Name Type Description <code>jd_overview</code> <code>str</code> <p>Summarized overview of the job description.</p> <code>candidate_overview</code> <code>str</code> <p>Summarized Overview of the candidate profile.</p>"},{"location":"models/#interview.jd_resume_models.JdResumeMatch","title":"<code>JdResumeMatch</code>","text":"<p>The result of the job description and resume match.</p> <p>Attributes:</p> Name Type Description <code>alignment_comments</code> <code>str</code> <p>Professional analysis detailing the alignment of the candidate's qualifications and skills with the job role requirements.</p> <code>alignment_score</code> <code>int</code> <p>A numerical representation (percentage) demonstrating level of compatibility between the candidate's qualifications and the job role requirements.</p>"},{"location":"models/#interview.models.Analysis","title":"<code>Analysis</code>","text":"<p>Analysis of the candidate's performance on a criterion</p>"},{"location":"models/#interview.models.AssessmentRubric","title":"<code>AssessmentRubric</code>","text":"<p>Rubric for evaluating the candidate's answer.</p> <p>Attributes:</p> Name Type Description <code>relevance_correctness_and_coherence</code> <code>Rubric</code> <p>The rubric for relevance, correctness, and coherence</p> <code>depth_and_examples</code> <code>Rubric</code> <p>The rubric for depth and examples</p> <code>creativeness_innovativeness</code> <code>Rubric</code> <p>The rubric for creativeness and innovativeness</p> <code>job_role_understanding</code> <code>Rubric</code> <p>The rubric for job role understanding</p>"},{"location":"models/#interview.models.EvaluatedAnswer","title":"<code>EvaluatedAnswer</code>","text":"<p>The evaluated answer to a question.</p> <p>Attributes:</p> Name Type Description <code>answer_evaluation</code> <code>Evaluation</code> <p>The evaluation of the answer</p> <code>spoken_analysis</code> <code>Optional[SpeechAssessmentOutput]</code> <p>The spoken analysis of the answer</p>"},{"location":"models/#interview.models.Evaluation","title":"<code>Evaluation</code>","text":"<p>Evaluation of the candidate's answer.</p> <p>Attributes:</p> Name Type Description <code>evaluation</code> <code>str</code> <p>The evaluation of the answer</p> <code>skill_assessments</code> <code>list[SkillAssessment]</code> <p>The assessments of the skills</p> <code>feedback</code> <code>str</code> <p>The feedback given to the candidate</p> <code>score</code> <code>float</code> <p>The score given to the candidate</p> <code>performance_summary</code> <code>str</code> <p>The updated performance summary</p>"},{"location":"models/#interview.models.FocusArea","title":"<code>FocusArea</code>","text":"<p>The focus area for the next set of questions.</p> <p>Attributes:</p> Name Type Description <code>source</code> <code>FocusAreaSource</code> <p>The source of the focus area</p> <code>focus_area</code> <code>str</code> <p>The focus area</p> <code>skills</code> <code>list[Skill]</code> <p>The skills required for the focus area</p>"},{"location":"models/#interview.models.InterviewAnswerEvaluationRequest","title":"<code>InterviewAnswerEvaluationRequest</code>","text":"<p>Evaluate the answer to a question</p>"},{"location":"models/#interview.models.InterviewQuestionGenerationResponse","title":"<code>InterviewQuestionGenerationResponse</code>","text":"<p>The generated questions.</p> <p>Attributes:</p> Name Type Description <code>questions</code> <code>list[Question]</code> <p>The generated questions</p> <code>focus_areas</code> <code>list[FocusArea]</code> <p>The focus areas for the questions</p>"},{"location":"models/#interview.models.InterviewQuestionsGenerationRequest","title":"<code>InterviewQuestionsGenerationRequest</code>","text":"<p>Request to generate questions for the candidate.</p> <p>Attributes:</p> Name Type Description <code>job_role</code> <code>str</code> <p>The job role for which the questions should be generated.</p> <code>num_questions_to_generate</code> <code>int</code> <p>Number of questions to generate.</p> <code>performance_summary</code> <code>str</code> <p>Summary of the performance of the candidate thus far.</p> <code>criteria</code> <code>list[Responsibility]</code> <p>The criteria based upon which the questions should be generated.</p> <code>candidate_profile</code> <code>str</code> <p>e.g. resume summary</p> <code>context</code> <code>str</code> <p>e.g. job description summary</p> <code>unassessed_questions</code> <code>list[str]</code> <p>If the questions is already asked but not yet assessed</p> <code>time_remaining_minutes</code> <code>int</code> <p>Amount of time remaining for the rest of the questions to answer</p>"},{"location":"models/#interview.models.Question","title":"<code>Question</code>","text":"<p>The generated question</p> <p>Attributes:</p> Name Type Description <code>question</code> <code>str</code> <p>The question</p> <code>focus_areas</code> <code>list[str]</code> <p>The focus areas for the question</p> <code>skills</code> <code>list[str]</code> <p>The skills required to answer the question</p> <code>level</code> <code>SkillLevel</code> <p>The level of the skill required</p> <code>candidate_context</code> <code>str</code> <p>The context of the candidate</p> <code>question_context</code> <code>str</code> <p>The context of the question</p>"},{"location":"models/#interview.models.Rubric","title":"<code>Rubric</code>","text":"<p>Rubric for evaluating the candidate's answer.</p> <p>Attributes:</p> Name Type Description <code>score</code> <code>float</code> <p>The score given to the rubric</p> <code>feedback</code> <code>str</code> <p>The feedback given to the rubric</p>"},{"location":"models/#interview.models.Skill","title":"<code>Skill</code>","text":"<p>A skill being evaluated in the generated question.</p> <p>Attributes:</p> Name Type Description <code>skill</code> <code>str</code> <p>The skill</p> <code>level</code> <code>SkillLevel</code> <p>The level of the skill</p>"},{"location":"models/#interview.models.SkillAssessment","title":"<code>SkillAssessment</code>","text":"<p>The assessment of a skill.</p> <p>Attributes:</p> Name Type Description <code>skill</code> <code>str</code> <p>The skill being assessed</p> <code>score</code> <code>float</code> <p>The score for the skill</p> <code>feedback</code> <code>str</code> <p>The feedback for the skill</p>"},{"location":"models/#cass.models.AdvancementLevel","title":"<code>AdvancementLevel</code>","text":"<p>Enum to represent the advancement level of the skill.</p> <p>Beginner: Basic level of understanding and application of the skill. Intermediate: Intermediate level of understanding and application of the skill. Advanced: Advanced level of understanding and application of the</p>"},{"location":"models/#cass.models.CompetencyPydantic","title":"<code>CompetencyPydantic</code>","text":"<p>Pydantic model for the Competency.</p> <p>Attributes:</p> Name Type Description <code>slug</code> <code>str</code> <p>Unique identifier for the competency.</p> <code>title</code> <code>str</code> <p>Title of the competency.</p> <code>description</code> <code>str</code> <p>Description of the competency.</p>"},{"location":"models/#cass.models.ContentInfo","title":"<code>ContentInfo</code>","text":"<p>Content Info for which we have to identify the skills</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>Title of the content.</p> <code>content</code> <code>str</code> <p>Content for which we have to identify the skills.</p> <code>content_type</code> <code>ContentType</code> <p>Type of the content.</p> <code>duration</code> <code>int</code> <p>Duration of the content.</p> <code>duration_unit</code> <code>DurationUnit</code> <p>Unit of the duration.</p> <code>context_type</code> <code>ContextType</code> <p>Context type of the content.</p> <code>context_description</code> <code>str</code> <p>Description of the context.</p>"},{"location":"models/#cass.models.ContentInfo.__str__","title":"<code>__str__</code>","text":"<p>Convert ContentInfo object to string</p>"},{"location":"models/#cass.models.ContentType","title":"<code>ContentType</code>","text":"<p>Enum to represent the type of the content.</p> <p>Course: Comprehensive summary of what the course includes. Lesson: Detailed overview of a specific lesson within a course. Test: Assessment of one or more skills or competencies in a limited time. JobDescription: Overview of the responsibilities and requirements for a specific job role. Resume: Summary of a candidate's experience, skills, and qualifications. Skill: Details of a specific skill to be assessed within the course or job role. Activity: Specific activity within a course module or assessment.</p>"},{"location":"models/#cass.models.ContextType","title":"<code>ContextType</code>","text":"<p>Enum to represent the context type of the content.</p> <p>JobInterview: Context of a job interview. Learning: Context of learning in a course or lesson. Test: Context of a test to assess certain skills or competencies. General: General context based on established standards.</p>"},{"location":"models/#cass.models.DurationUnit","title":"<code>DurationUnit</code>","text":"<p>Enum to represent the unit of duration.</p> <p>Second: Duration in seconds. Minute: Duration in minutes. Hour: Duration in hours. Day: Duration in days. Week: Duration in weeks. Month: Duration in months. Year: Duration in years.</p>"},{"location":"models/#cass.models.RubricPydantic","title":"<code>RubricPydantic</code>","text":"<p>Pydantic model for the Rubric.</p> <p>Attributes:</p> Name Type Description <code>score_level</code> <code>int</code> <p>The level of the score ranging from 0 to 5.</p> <code>evaluation_criteria</code> <code>str</code> <p>Evaluation criteria that the rubric must meet at a specific score level.</p>"},{"location":"models/#cass.models.SkillPydantic","title":"<code>SkillPydantic</code>","text":"<p>Pydantic model for the Skill.</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>Title of the skill.</p> <code>description</code> <code>str</code> <p>Description of the skill.</p> <code>advancement_level</code> <code>AdvancementLevel</code> <p>Advancement level of the skill.</p> <code>rubric</code> <code>list[RubricPydantic]</code> <p>Rubric to map score from 0-5 to the criterion that the score represents.</p>"},{"location":"models/#knowledge.models.File","title":"<code>File</code>","text":""},{"location":"models/#knowledge.models.File.compute_documents","title":"<code>compute_documents</code>  <code>async</code>","text":"<p>Compute the documents from the file</p> <p>Parameters:</p> Name Type Description Default <code>loader_class</code> <code>class</code> <p>The class of the loader to use to load the file</p> required"},{"location":"models/#knowledge.models.File.file_is_empty","title":"<code>file_is_empty</code>","text":"<p>Check if file is empty by checking if the file pointer is at the beginning of the file</p>"},{"location":"models/#knowledge.models.FileMetadata","title":"<code>FileMetadata</code>","text":"<p>File metadata model</p> <p>Attributes:</p> Name Type Description <code>source_type</code> <code>KnowledgeSourceType</code> <p>The source type of the knowledge</p> <code>title</code> <code>str</code> <p>The title of the knowledge</p> <code>metadata</code> <code>dict</code> <p>Other application specific metadata associated with the knowledge</p>"},{"location":"models/#knowledge.models.Knowledge","title":"<code>Knowledge</code>","text":"<p>Knowledge model</p> <p>Attributes:</p> Name Type Description <code>file_id</code> <code>str</code> <p>The unique identifier for the knowledge</p> <code>repository</code> <code>KnowledgeRepository</code> <p>The knowledge repository to which the knowledge belongs</p> <code>title</code> <code>str</code> <p>The title of the knowledge</p> <code>metadata</code> <code>dict</code> <p>The metadata associated with the knowledge</p> <code>created_at</code> <code>datetime</code> <p>The datetime when the knowledge was created</p> <code>updated_at</code> <code>datetime</code> <p>The datetime when the knowledge was updated</p> <code>content</code> <code>str</code> <p>The text content of the knowledge</p> <code>status</code> <code>KnowledgeStatus</code> <p>The status of the knowledge</p> <code>extension</code> <code>str</code> <p>The extension of the knowledge file</p> <code>size</code> <code>int</code> <p>The size of the knowledge file</p> <code>num_chunks</code> <code>int</code> <p>The number of chunks for this knowledge</p> <code>message</code> <code>str</code> <p>The message associated with the processing of the knowledge</p>"},{"location":"models/#knowledge.models.KnowledgeItems","title":"<code>KnowledgeItems</code>","text":"<p>Knowledge items model</p> <p>Attributes:</p> Name Type Description <code>items</code> <code>list[KnowledgeListItem]</code> <p>The list of knowledge items</p> <code>total_count</code> <code>int</code> <p>The total count of knowledge items</p> <code>remaining_count</code> <code>int</code> <p>The remaining count of knowledge items</p>"},{"location":"models/#knowledge.models.KnowledgeListItem","title":"<code>KnowledgeListItem</code>","text":"<p>Knowledge list item model</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The unique identifier for the knowledge</p> <code>title</code> <code>str</code> <p>The title of the knowledge</p> <code>updated_at</code> <code>datetime</code> <p>The datetime when the knowledge was updated</p> <code>status</code> <code>KnowledgeStatus</code> <p>The status of the knowledge</p> <code>extension</code> <code>str</code> <p>The extension of the knowledge file</p> <code>size</code> <code>int</code> <p>The size of the knowledge file</p> <code>message</code> <code>str</code> <p>The message associated with the processing of the knowledge</p>"},{"location":"models/#knowledge.models.KnowledgeOut","title":"<code>KnowledgeOut</code>","text":"<p>Knowledge output model</p> <p>Attributes:</p> Name Type Description <code>id</code> <code>int</code> <p>The unique identifier for the knowledge</p> <code>file_id</code> <code>str</code> <p>The sha1 hash for the knowledge file</p> <code>title</code> <code>str</code> <p>The title of the knowledge</p> <code>metadata</code> <code>dict</code> <p>The metadata associated with the knowledge</p> <code>updated_at</code> <code>datetime</code> <p>The datetime when the knowledge was updated</p> <code>status</code> <code>KnowledgeStatus</code> <p>The status of the knowledge</p> <code>extension</code> <code>str</code> <p>The extension of the knowledge file</p> <code>size</code> <code>int</code> <p>The size of the knowledge file</p> <code>message</code> <code>str</code> <p>The message associated with the processing of the knowledge</p>"},{"location":"models/#knowledge.models.KnowledgeRepository","title":"<code>KnowledgeRepository</code>","text":"<p>Knowledge Repository model</p> <p>Attributes:</p> Name Type Description <code>repo_id</code> <code>UUID</code> <p>The unique identifier for the knowledge repository</p> <code>name</code> <code>str</code> <p>The name of the knowledge repository</p> <code>description</code> <code>str</code> <p>The description of the knowledge repository</p> <code>created_at</code> <code>datetime</code> <p>The datetime when the knowledge repository was created</p> <code>user</code> <code>User</code> <p>The user who created the knowledge repository</p> <code>webhook_url</code> <code>str</code> <p>The webhook URL to call when a file is processed in the repository</p> <code>webhook_headers</code> <code>dict</code> <p>The headers to send with the webhook</p> <code>webhook_method</code> <code>str</code> <p>The method to use for the webhook</p>"},{"location":"models/#knowledge.models.KnowledgeRepositoryIn","title":"<code>KnowledgeRepositoryIn</code>","text":"<p>Knowledge Repository input model</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the knowledge repository</p> <code>description</code> <code>str</code> <p>The description of the knowledge repository</p> <code>webhook_url</code> <code>str</code> <p>The webhook URL to call when a file is processed in the repository</p> <code>webhook_headers</code> <code>dict</code> <p>The headers to send with the webhook</p> <code>webhook_method</code> <code>str</code> <p>The method to use for the webhook</p>"},{"location":"models/#knowledge.models.KnowledgeRepositoryOut","title":"<code>KnowledgeRepositoryOut</code>","text":"<p>Knowledge Repository output model</p> <p>Attributes:</p> Name Type Description <code>repo_id</code> <code>str</code> <p>The unique identifier for the knowledge repository</p> <code>name</code> <code>str</code> <p>The name of the knowledge repository</p>"},{"location":"models/#knowledge.models.KnowledgeStatus","title":"<code>KnowledgeStatus</code>","text":"<p>Enum to represent the status of the knowledge</p> <p>VALUES:</p> <ul> <li>PENDING: The knowledge is pending</li> <li>SUCCESS: The knowledge was processed successfully</li> <li>ERROR: There was an error processing the knowledge</li> <li>WARNING: There was a warning processing the knowledge</li> </ul>"},{"location":"models/#knowledge.models.Metadata","title":"<code>Metadata</code>","text":"<p>Metadata model</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The title of the knowledge</p> <code>tags</code> <code>list[str]</code> <p>The tags associated with the knowledge</p>"},{"location":"models/#creator.models.ActivityInfo","title":"<code>ActivityInfo</code>","text":"<p>Activity Information model</p> <p>Attributes:</p> Name Type Description <code>activity_type</code> <code>ActivityType</code> <p>The type of activity</p> <code>skills_covered</code> <code>list[str]</code> <p>The list of skills covered</p> <code>duration</code> <code>int</code> <p>The duration of the activity</p> <code>duration_unit</code> <code>DurationUnit</code> <p>The duration unit</p> <code>level_of_advancement</code> <code>AdvancementLevel</code> <p>The level of advancement</p> <code>title</code> <code>str</code> <p>The title of the activity</p> <code>description</code> <code>str</code> <p>The description of the activity</p>"},{"location":"models/#creator.models.ActivityListRequest","title":"<code>ActivityListRequest</code>","text":"<p>Activity List Request model</p> <p>Attributes:</p> Name Type Description <code>content_info</code> <code>ContentInfo</code> <p>The content information</p> <code>skills</code> <code>list[SkillPydantic]</code> <p>The list of skills</p>"},{"location":"models/#creator.models.ActivityRequest","title":"<code>ActivityRequest</code>","text":"<p>Activity Request model</p> <p>Attributes:</p> Name Type Description <code>info</code> <code>ActivityInfo</code> <p>The activity information</p> <code>context</code> <code>str</code> <p>The context for which activity needs to be generated</p> <code>sub_type</code> <code>ActivitySubType</code> <p>The sub type of activity if required to generate a single question in a quiz</p> <code>sub_type_description(str)</code> <code>ActivitySubType</code> <p>The content for which activity needs to be generated. Required for sub type.</p>"},{"location":"models/#creator.models.ActivitySubType","title":"<code>ActivitySubType</code>","text":"<p>Enum to represent the sub type of activity.</p>"},{"location":"models/#creator.models.ActivityType","title":"<code>ActivityType</code>","text":"<p>Enum to represent the type of activity.</p>"},{"location":"models/#creator.models.FillInTheBlankQuestion","title":"<code>FillInTheBlankQuestion</code>","text":"<p>Fill in the Blank Question model</p> <p>Attributes:</p> Name Type Description <code>question</code> <code>str</code> <p>The question text containing embedded answers, e.g. 'The capital of France is {{Paris}}.'</p>"},{"location":"models/#creator.models.MCQQuestion","title":"<code>MCQQuestion</code>","text":"<p>MCQ Question model</p> <p>Attributes:</p> Name Type Description <code>question</code> <code>str</code> <p>The question text</p> <code>options</code> <code>list[Option]</code> <p>The list of options</p> <code>explanation</code> <code>str</code> <p>The explanation for the answer</p>"},{"location":"models/#creator.models.ModuleInfo","title":"<code>ModuleInfo</code>","text":"<p>Module Information model</p> <p>Attributes:</p> Name Type Description <code>title</code> <code>str</code> <p>The module title</p> <code>description</code> <code>str</code> <p>The module description</p> <code>duration</code> <code>int</code> <p>The module duration in specified unit</p> <code>duration_unit</code> <code>DurationUnit</code> <p>The module duration unit</p> <code>level_of_advancement</code> <code>AdvancementLevel</code> <p>The module level of advancement</p> <code>competencies_covered</code> <code>list[str]</code> <p>The list of competencies covered</p> <code>skills_covered</code> <code>list[str]</code> <p>The list of skills covered</p>"},{"location":"models/#creator.models.ModuleListResponse","title":"<code>ModuleListResponse</code>","text":"<p>Module List Response model</p> <p>Attributes:</p> Name Type Description <code>modules</code> <code>list[ModuleInfo]</code> <p>The list of modules</p>"},{"location":"models/#creator.models.Question","title":"<code>Question</code>","text":"<p>Question model</p> <p>Attributes:</p> Name Type Description <code>instructions</code> <code>str</code> <p>Instructions on how to attempt the activity</p> <code>content</code> <code>str</code> <p>Content of the activity</p> <code>min_response_duration_in_seconds</code> <code>Optional[float]</code> <p>Minimum Duration of the spoken response in seconds if relevant</p> <code>min_response_word_limit</code> <code>Optional[int]</code> <p>Minimum Word limit for the written response if relevant</p> <code>times_audio_can_be_played</code> <code>Optional[int]</code> <p>Number of times the audio can be played if relevant</p>"},{"location":"models/#creator.models.Quiz","title":"<code>Quiz</code>","text":"<p>Quiz model</p> <p>Attributes:</p> Name Type Description <code>instructions</code> <code>str</code> <p>Instructions for the quiz</p> <code>content</code> <code>str</code> <p>Content for the quiz. This can be a text to read if questions are based upon that, else this field can be empty.</p> <code>mcq_questions</code> <code>list[MCQQuestion]</code> <p>List of MCQ questions</p> <code>fill_in_the_blank_questions</code> <code>list[FillInTheBlankQuestion]</code> <p>List of fill in the blanks questions. A fill in the blank question can have maximum three blanks.</p> <code>descriptive_spoken_questions</code> <code>list[DescriptiveSpokenQuestion]</code> <p>List of descriptive spoken questions</p> <code>descriptive_written_questions</code> <code>list[DescriptiveWrittenQuestion]</code> <p>List of descriptive written questions</p>"}]}